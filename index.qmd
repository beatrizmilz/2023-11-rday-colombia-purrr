---
title: "Purrr-fecting your R workflow"
subtitle: "An introduction to functional programming <br> R Day Colombia"
author: "[Beatriz Milz](https://beamilz.com)"
format: 
  rladies-revealjs:
    footer: "Slides por [Beatriz Milz](https://beamilz.com) (@BeaMilz), feito com [Quarto](https://quarto.org/docs/presentations/revealjs/index.html) e [Quarto R-Ladies Theme](https://github.com/beatrizmilz/quarto-rladies-theme#quarto-r-ladies-theme)."
    logo: "https://github.com/beatrizmilz/2023-11-rday-colombia-purrr/blob/main/_extensions/beatrizmilz/rladies/logo.png?raw=true"
    code-link: true  
incremental: false
knitr:
  opts_chunk: 
    echo: true
---

## Who am I? {.center}

```{r}
#| echo: false
#| eval: true
library(tidyverse)
```

```{css, echo = FALSE}
.reveal pre code {
  font-size: 1.5em !important;
}
```

-   Co-organizer [R-Ladies SÃ£o Paulo](https://rladies-sp.org)

-   PhD Candidate in Environmental Sciences at the University of Sao Paulo, Brazil

-   Teacher and Consultant at [Curso-R](https://curso-r.com/)

-   Tidyverse certified instructor - Posit

-   Contact:

    -   Email: [milz.bea\@gmail.com](mailto:milz.bea@gmail.com)
    -   More in my website: [beamilz.com](https://beamilz.com/about-es)

## Leading the translation of R4DS to Portuguese {.center}

Inspired by the Spanish version: <https://es.r4ds.hadley.nz/>

[![](img/r4ds.png){fig-align="center" width="8%"}](https://cienciadedatos.github.io/pt-r4ds/)

<https://cienciadedatos.github.io/pt-r4ds/>

## Plan for today {.center}

-   What is functional programming?

-   What is the `{purrr}` package?

-   What are **my** favorite `{purrr}` functions?

-   Example of how `{purrr}` helps in my workflow!

# Let's go!

## Functional programming in R {.center}

-   Functional programming is a programming paradigm

-   Functions are really important in this context!

## Let's remember: what is a function in R?

-   A function is a set of instructions that takes an input (arguments) and returns an output.

-   You can encapsulate and reuse code.

## Example

Instead of writing this command in the terminal:

```{bash}
date
```

You can use this function in R:

```{r}
Sys.time()
```

## We use functions all the time!

-   `library()`
-   `install.packages()`
-   `c()`
-   `help()`
-   `mean()`
-   `sum()`
-   `paste()`
-   ...

## Structure of a function

A function has:

-   a name

-   arguments

-   a body

-   a return value (it is the last line of the function)

``` r
name_of_function <- function(argument1, argument2, ...) {
  body
  return(value)
}
```

## Simple example of how to create a function

```{r}
#| code-line-numbers: "1|2-3|3"
convert_reais_to_us_dollars <- function(reais) {
  us_dollar <- reais / 4.87
  scales::dollar(us_dollar)
}
```

-   Minimum wage in Brazil per month in US Dollars:

```{r}
convert_reais_to_us_dollars(1320)
```

## Example of a more useful function

-   In Brazil, we use the date format `dd/mm/yyyy`: 21/01/2021.

-   We can use the function `as.Date()` to convert the date format, but we need to specify the format of the date.

```{r}
as.Date("24/11/2023", format = "%d/%m/%Y")
```

-   We can create a function to do this for us!

```{r}
convert_date_br <- function(date){
  as.Date(date, format = "%d/%m/%Y")
}
convert_date_br("14/10/2023")
```

# Let's purrr!

## The purrr package

-   A toolbox for functional programming

-   Many of the functions in purrr are alternatives to `for` loops

-   Code with `{purrr}` is shorter and clearer than `for` loops

-   Knowing how to use `{purrr}` allows you to use the `{furrr}` package: it has the same syntax, but allows you to run code in parallel

::: footer
Source: [Hadley Wickham](https://www.youtube.com/watch?v=EGAs7zuRutY)
:::

## Package version

-   Check if the version installed is \>= 1.0.0.

```{r}
#| echo: true
packageVersion("purrr")
```

-   If not, install the latest version:

```{r}
#| eval: false
#| echo: true
install.packages("purrr")
```

## My favorite functions

-   purrr has many functions!

-   Many work similarly.

-   We will focus on some today :)

    -   `purrr::map()`

    -   `purrr::map_vec()`

    -   `purrr::list_c()`, `purrr::list_rbind()`, `purrr::list_cbind()`

    -   `purrr::pluck()`

-   Examples on daily tasks!

# Let's start!

```{r}
library(tidyverse)
```

## `purrr::map()`

-   `purrr::map()` is the most important function in purrr

-   Given an object (can be a vector or a list) we want to apply a function to each element of that object.

-   It returns a list

```{r}
#| eval: false
#| echo: true
# Structure
map(vector_or_list, name_of_the_function)
```

-   There are many functions that start with `map_*()` and have similar behavior

## Simple example of `purrr::map()`

```{r}
# Vector that we want to apply the function
countries_mercosul <- c("Brazil", "Argentina",
                        "Uruguay", "Paraguay")
map(countries_mercosul, str_to_upper)
```

## What if I want a vector to be returned? {.center}

## We can use `purrr::map_vec()`!

-   `map_vec()` is a variant of `map()` that always returns a vector!

-   It is useful when you want to apply a function to each element of a vector and return a vector.

```{r}
map_vec(countries_mercosul, str_to_upper) 
```

## We also can use `purrr::list_c()`!

-   `list_c()` is a function that takes a **list** and returns a **vector**

-   It is useful to use after `map()`, and you want to convert the list into a vector

```{r}
map(countries_mercosul, str_to_upper) |> list_c()
```

## `purrr::pluck()`

-   `pluck()` is a function that extracts a single element from a list

-   `pluck()` can be used to extract elements from nested lists. That's where it shines!

-   We will use a simple list for the examples:

```{r}
map(countries_mercosul, str_to_upper)
```

## Example of `purrr::pluck()`

```{r}
map(countries_mercosul, str_to_upper) |> pluck(1)
map(countries_mercosul, str_to_upper) |> pluck(2)
map(countries_mercosul, str_to_upper) |> pluck(3)
map(countries_mercosul, str_to_upper) |> pluck(4)
```

## Why we don't use `[[ ]]` instead?

-   With `pluck()`:

```{r}
map(countries_mercosul, str_to_upper) |> pluck(1)
```

-   With `[[ ]]`:

```{r}
#| error: true
map(countries_mercosul, str_to_upper)[[1]]
```

## Pluck is **pipeable**! `|>`

-   With `pluck()`:

```{r}
map(countries_mercosul, str_to_upper) |>
  pluck(1)
```

-   With `[[ ]]`:

```{r}
#| error: true
map(countries_mercosul, str_to_upper) |> 
  .[[1]]
```

## Pluck is safer!

-   If the element does not exist, it returns `NULL` instead of an error.

-   With `pluck()`:

```{r}
map(countries_mercosul, str_to_upper) |> pluck(5)
```

-   With `[[ ]]`:

```{r}
#| error: true
map(countries_mercosul, str_to_upper)[[5]]
```

## `list_rbind()`, `list_cbind()`

-   `list_rbind()` and `list_cbind()` are functions that bind lists that contains dataframes (by row or column) and returns a tibble.

-   Let's see a real life example!

# Example on my daily tasks

-   I had to pick one to fit in the time we have today!

## Example

> "I have a folder with multiple files that I want to import. How can I do that?"

-   Remember: to use `map()`, we need:

    -   a vector or a list of the elements that we want to apply the function;

    -   a function.

## Example

If we want to import **one** file, we can use `readxl::read_excel()`:

```{r}
library(readxl)
recent_chla <- read_excel("data/ex-1/RelatorioQualidadeAguasSuperficiais_clorofila-a_2018-2022.xlsx")
glimpse(recent_chla)
```

## Example

-   But we want to import **multiple** files!

-   The function is the same (`readxl::read_excel()`), but we need to apply it to multiple files.

-   We need to create a vector with all the file paths!

## Example

-   Let's start creating the vector of files that we want to import:

```{r}
#| eval: true
#| echo: true
files_to_import <-
  list.files(path = "data/ex-1",
             pattern = "*.xlsx",
             full.names = TRUE)
files_to_import
```

## Example

-   Now, we need a function that imports the files: `readxl::read_excel()`:

```{r}
result_import <- files_to_import |> 
  map(read_excel)

result_import
```

## Example

-   Remember: `map()` returns a list!

```{r}
class(result_import)
```

-   But we want to bind the dataframes by row!

## Example

-   We can use `list_rbind()`:

```{r}
result_import_df <- files_to_import |> 
  map(read_excel) |> 
  list_rbind()

glimpse(result_import_df)
```

# Final thoughts

-   `purrr` is a very powerful package!

-   I use it a lot in my daily tasks!

-   Today, I focused on helping you to understand the basics to start using `purrr`. But there is other functions that you can learn!

# Learn more

-   [Documentation of the purrr package](https://purrr.tidyverse.org/index.html)

-   [News on the purrr package: version 1.0.0](https://www.tidyverse.org/blog/2022/12/purrr-1-0-0/)

-   Video: [Hadley Wickham \| {purrr} 1.0: A complete and consistent set of tools for functions and vectors](https://www.youtube.com/watch?v=EGAs7zuRutY)

-   [R for Data Science - 2nd Ed. - Program](https://r4ds.hadley.nz/program)
